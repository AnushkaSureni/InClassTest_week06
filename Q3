using array

#include <iostream>
#include <chrono>
#include <iostream>
using namespace std;

#define MAX_SIZE 25

class Stack {
private:
    int arr[MAX_SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }
    //check whether stack is empty.
    bool isEmpty() {
        if (top<0){
            return true;
        }
        else{
            return false;
        }
    }
    
    // push an element x to the stack
    bool push(int x) {
        top=top+1;
        if (top > MAX_SIZE ) {
            cout << "Stack Overflow!" << endl;
            return false;
        } else {
            arr[top] = x;
            return true;
        }
    }
    
    //remove a element from the stack
    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow!" << endl;
            return -1;
        } else {
            int popped_element = arr[top];
            top=top-1;
            return popped_element;
        }
    }

    //display the final stack
    void displayStack() {
        cout << "Final stack:" << endl;
        for(int i = 0; i <=top; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Stack s;
    auto start = std::chrono::high_resolution_clock::now();
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.displayStack();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.push(4);
    s.push(13);
    s.push(3);
    s.push(1);
    s.displayStack();
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;

    std::cout << "Execution time: " << elapsed.count() << " seconds" << std::endl;

    return 0;
    
}


using linked list

#include <iostream>
#include <chrono> 
using namespace std;
using namespace std::chrono;


class Node {
public:
    int data;
    Node* next;
    Node(int data) {
        this->data = data;
        next = nullptr;
    }
};

class Stack {
public:
    Node* head;

    Stack() {
        head = nullptr;
    }
    

    void push(int data) {
        Node* new_node = new Node(data);
        new_node->next = head;
        head = new_node;
    }

    int pop() {
        if (head == nullptr) {
            cout << "Stack is empty!" << endl;
            return -1;
        }
        int popped_data = head->data;
        Node* temp = head;
        head = head->next;
        delete temp;
        return popped_data;
    }
    
    void display() {
        if (head == nullptr) {
            cout << "Stack is empty!" << endl;
            return;
        }
        cout << "Stack: ";
        Node* current = head;
        while (current != nullptr) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }
};

    

int main() {
    Stack s;
    
    auto start_display = high_resolution_clock::now();
    
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.display();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.display();
    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    s.display();
    
    auto stop_display = high_resolution_clock::now();
    auto duration_display = duration_cast<microseconds>(stop_display - start_display);
    cout << "Time taken: " << duration_display.count() << " microseconds" << endl;

    
    return 0;
}
